*process system(cics) or('|') not('^') langlvl(saa2);
 /* APCT02: CICS demo program                                        */
 /********************************************************************/
 /*                                                                  */
 /* This program is the first invoked by the 'AP02'                  */
 /* transaction.  Tt completes requests for account file             */
 /* updates (adds, modifies, and deletes), after the user            */
 /* entered the update information.                                  */
 /*                                                                  */
 /* compile w/ nonnative and ebcdic                                  */
 /*                                                                  */
 /********************************************************************/
 APCT02: proc(dfhcommareaptr) options(main);
   dcl dfhcommareaptr ptr;
   dcl 1 DFHCOMMAREA based(dfhcommareaptr),
         2  REQC                   char(1),
         2  ACCTC                  char(5);
   dcl MENU_MSGNO                 fixed bin(15) init(1),
       DTL_MSGNO                  fixed bin(15) init(0),
       ACCT_LNG                   fixed bin(15) init(383),
       DTL_LNG                    fixed bin(15) init(751),
       HEX80                      char(1) init('80'x),
       ACIX_KEY                   char(12) init(''),
       STARS                      char(12) init('************');
   dcl 1 *,
         2 * union,
           3 USE_QID                  char(8),
           3 *,
             4 USE_QID1               char(3) init('AP0'),
             4 USE_QID2               char(5),
         2 USE_REC,
           4 USE_TERM                 char(4),
           4 USE_TIME                 fixed dec(7),
           4 USE_DATE                 fixed dec(7),
         2 USE_LNG                    fixed bin(15) init(12),
         2 OLD_IXKEY,
           4 IXOLD_SNAME              char(12),
         2 IXOLD_ACCT                 char(5);
   dcl 1 COMMAREA_FOR_APCT04,
         3 ERR_PGRMID                 char(8) init('APCT02'),
         3 * union,
           4 ERR_CODE              char(2),
           4 *,
             5 ERR_FN              char(1),
             5 ERR_RCODE           char(1);
    dcl PAY_INIT                   char(36) init(
                   '    0.00000000    0.00000000    0.00');
    dcl MENU_MSG(4)                char(60) init(
                   'PREVIOUS REQUEST CANCELED AS REQUESTED',
                   'REQUESTED ADDITION COMPLETED',
                   'REQUESTED MODIFICATION COMPLETED',
                   'REQUESTED DELETION COMPLETED');
    dcl DTL_MSG(5)                 char(60) init(
             'EITHER ENTER "Y" TO CONFIRM OR "CLEAR" TO CANCEL',
             'YOUR REQUEST WAS INTERRUPTED; PLEASE CANCEL AND RETRY',
             'CORRECT HIGHLIGHTED ITEMS (STARS MEAN ITEM REQUIRED)',
             'USE ONLY "ENTER" (TO PROCEED) OR "CLEAR" (TO CANCEL)',
             'MAKE SOME ENTRIES AND "ENTER" OR "CLEAR" TO CANCEL');
    dcl 1 MOD_LINE static,
          4 *                        char(25) init(
                  '==========> CHANGES TO:  '),
          4 MOD_NAME                 char(6) init(''),
          4 MOD_TELE                 char(5) init(''),
          4 MOD_ADDR                 char(6) init(''),
          4 MOD_AUTH                 char(6) init(''),
          4 MOD_CARD                 char(6) init(''),
          4 MOD_CODE                 char(5) init(''),
          4 * char(0);
    dcl 1 UPDT_LINE static,
          4 *                        char(30) init(
                  '==========> UPDATED AT TERM:  '),
          4 UPDT_TERM                char(4),
          4 *                        char(6) init('  AT  '),
          4 UPDT_TIME                pic '(7)9',
          4 *                        char(6) init('  ON  '),
          4 UPDT_DATE                pic '(7)9',
          4 * char(0);

  dcl 1 NEW_ACCTREC,
  %include ACCTREC;
  dcl 1 OLD_ACCTREC,
  %include ACCTREC;
  %include APCTSET;
  %include DFHAID;
  %include DFHBMSCA;

   dcl alphabetic char(54) init (
               'abcdefghijklmnopqrstuvwxyz ' ||
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ ');
   dcl alphabetic_lower char(27) init (
               'abcdefghijklmnopqrstuvwxyz ');
   dcl alphabetic_upper char(27) init (
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ ');
   dcl numeric_sign char(12) init ('0123456789+-');
   dcl numeric      char(10) init ('0123456789');

 /*******************************************************************/
   CALL PLIFILL(ADDR(ACCTDTLI),'00'X,STG(ACCTDTLI));
   OLD_ACCTREC, NEW_ACCTREC = '';
   EXEC CICS HANDLE AID CLEAR(CK_OWN) PA1(PA_KEY)
       PA2(PA_KEY) PA3(PA_KEY);
   EXEC CICS HANDLE CONDITION QIDERR(NO_OWN)
       MAPFAIL(NO_MAP) ERROR(NO_GOOD);
   EXEC CICS IGNORE CONDITION DUPKEY;
   EXEC CICS RECEIVE MAP('ACCTDTL') MAPSET('APCTSET');
   IF REQC ^= 'A' then
     do;
       EXEC CICS READ DATASET('ACCTFIL') INTO(OLD_ACCTREC)
           RIDFLD(ACCTC) UPDATE LENGTH(ACCT_LNG);
       NEW_ACCTREC = OLD_ACCTREC;
       IXOLD_SNAME = OLD_ACCTREC.SNAMEDO;
       IXOLD_ACCT = ACCTC;
     end;
   IF REQC = 'X' then
     do;
       IF VFYDI = 'Y' then
         GO TO CK_OWN;
       VFYDL = -1;
       VFYDA = DFHUNIMD;
       DTL_MSGNO = 1;
       GO TO INPUT_REDISPLAY;
     end;
   IF SNAMEDL > 0 then NEW_ACCTREC.SNAMEDO = SNAMEDI;
   IF FNAMEDL > 0 then NEW_ACCTREC.FNAMEDO = FNAMEDI;
   IF MIDL    > 0 then NEW_ACCTREC.MIDO    = MIDI;
   IF TTLDL   > 0 then NEW_ACCTREC.TTLDO   = TTLDI;
   IF TELDL   > 0 then NEW_ACCTREC.TELDO   = TELDI;
   IF addr1dl > 0 then NEW_ACCTREC.addr1do  = addr1di;
   IF addr2dl > 0 then NEW_ACCTREC.addr2do  = addr2di;
   IF addr3dl > 0 then NEW_ACCTREC.addr3do  = addr3di;
   IF auth1dl > 0 then NEW_ACCTREC.auth1do  = auth1di;
   IF auth2dl > 0 then NEW_ACCTREC.auth2do  = auth2di;
   IF auth3dl > 0 then NEW_ACCTREC.auth3do  = auth3di;
   IF auth4dl > 0 then NEW_ACCTREC.auth4do  = auth4di;
   IF cardsdl > 0 then NEW_ACCTREC.cardsdo  = cardsdi;
   IF imodl   > 0 then NEW_ACCTREC.imodo    = imodi;
   IF idaydl  > 0 then NEW_ACCTREC.idaydo   = idaydi;
   IF iyrdl   > 0 then NEW_ACCTREC.iyrdo    = iyrdi;
   IF rsndl   > 0 then NEW_ACCTREC.rsndo    = rsndi;
   IF ccodedl > 0 then NEW_ACCTREC.ccodedo  = ccodedi;
   IF apprdl  > 0 then NEW_ACCTREC.apprdo   = apprdi;
   IF scode1dl > 0 then NEW_ACCTREC.scode1do = scode1di;
   IF scode2dl > 0 then NEW_ACCTREC.scode2do = scode2di;
   IF scode3dl > 0 then NEW_ACCTREC.scode3do = scode3di;
   IF REQC = 'A' then GO TO EDIT_0;
   IF snamedf = hex80 then NEW_ACCTREC.snamedo = '';
   IF fnamedf = hex80 then NEW_ACCTREC.fnamedo = '';
   IF midf = hex80 then NEW_ACCTREC.mido = '';
   IF ttldf = hex80 then NEW_ACCTREC.ttldo = '';
   IF teldf = hex80 then NEW_ACCTREC.teldo = '';
   IF addr1df = hex80 then NEW_ACCTREC.addr1do = '';
   IF addr2df = hex80 then NEW_ACCTREC.addr2do = '';
   IF addr3df = hex80 then NEW_ACCTREC.addr3do = '';
   IF auth1df = hex80 then NEW_ACCTREC.auth1do = '';
   IF auth2df = hex80 then NEW_ACCTREC.auth2do = '';
   IF auth3df = hex80 then NEW_ACCTREC.auth3do = '';
   IF auth4df = hex80 then NEW_ACCTREC.auth4do = '';
   IF cardsdf = hex80 then NEW_ACCTREC.cardsdo = '';
   IF imodf = hex80 then NEW_ACCTREC.imodo = 0;
   IF idaydf = hex80 then NEW_ACCTREC.idaydo = 0;
   IF iyrdf = hex80 then NEW_ACCTREC.iyrdo = 0;
   IF rsndf = hex80 then NEW_ACCTREC.rsndo = '';
   IF ccodedf = hex80 then NEW_ACCTREC.ccodedo = '';
   IF apprdf = hex80 then NEW_ACCTREC.apprdo = '';
   IF scode1df = hex80 then NEW_ACCTREC.scode1do = '';
   IF scode2df = hex80 then NEW_ACCTREC.scode2do = '';
   IF scode3df = hex80 then NEW_ACCTREC.scode3do = '';
   IF string(OLD_ACCTREC) = string(NEW_ACCTREC) then
     do;
       DTL_MSGNO = 5;
       GO TO INPUT_REDISPLAY;
     end;

 EDIT_0:
   CALL PLIFILL(ADDR(ACCTDTLI),'00'X,STG(ACCTDTLI));
   IF NEW_ACCTREC.snamedo = '' then
     SNAMEDI = stars;
   ELSE
     IF verify(NEW_ACCTREC.snamedo, alphabetic) = 0 then
       GO TO EDIT_1;
   SNAMEDA = DFHUNIMD;
   SNAMEDL = -1;

 EDIT_1:
   IF NEW_ACCTREC.fnamedo = '' then
     fnameDI = stars;
   ELSE
     IF verify(NEW_ACCTREC.fnamedo, alphabetic) = 0 then
       GO TO EDIT_2;
   fnameDA = DFHUNIMD;
   fnameDL = -1;

 EDIT_2:
   IF verify(NEW_ACCTREC.mido, alphabetic) ^= 0 then
     do;
       miDA = DFHUNIMD;
       miDL = -1;
     end;
   IF verify(NEW_ACCTREC.ttldo, alphabetic) ^= 0 then
     do;
       ttlDA = DFHUNIMD;
       ttlDL = -1;
     end;
   IF NEW_ACCTREC.addr1DO = '' then
     do;
       addr1DI = stars;
       addr1DA = DFHBMBRY;
       addr1DL = -1;
     end;
   IF NEW_ACCTREC.addr2DO = '' then
     do;
       addr2DI = stars;
       addr2DA = DFHBMBRY;
       addr2DL = -1;
     end;
   IF NEW_ACCTREC.CARDSDO = '' then
     CARDSDI = stars;
   ELSE
     IF NEW_ACCTREC.CARDSDO  > '0' &
        NEW_ACCTREC.CARDSDO ^> '9' then
       GO TO EDIT_3;
   CARDSDA = DFHUNIMD;
   CARDSDL = -1;

 EDIT_3:
   IF NEW_ACCTREC.imoDO = '' then
     imoDI = stars;
   ELSE
     IF verify(NEW_ACCTREC.imoDO, numeric) = 0 &
        NEW_ACCTREC.imoDO > '00' &
        NEW_ACCTREC.imoDO < '13' then
       GO TO EDIT_4;
   imoDA = DFHUNIMD;
   imoDL = -1;

 EDIT_4:
   IF NEW_ACCTREC.idayDO = '' then
     idayDI = stars;
   ELSE
     IF verify(NEW_ACCTREC.idayDO, numeric) = 0 &
        NEW_ACCTREC.idayDO > '00' &
        NEW_ACCTREC.idayDO < '32' then
       GO TO EDIT_5;
   idayDA = DFHUNIMD;
   idayDL = -1;

 EDIT_5:
   IF NEW_ACCTREC.iyrDO = '' then
     iyrDI = stars;
   ELSE
     IF verify(NEW_ACCTREC.iyrDO, numeric) = 0 &
        NEW_ACCTREC.iyrDO > '75' then
       GO TO EDIT_6;
   iyrDA = DFHUNIMD;
   iyrDL = -1;

 EDIT_6:
   IF NEW_ACCTREC.rsnDO = '' then
     rsnDI = stars;
   ELSE
     IF NEW_ACCTREC.rsnDO = 'N' |
        NEW_ACCTREC.rsnDO = 'L' |
        NEW_ACCTREC.rsnDO = 'S' |
        NEW_ACCTREC.rsnDO = 'R' then
       GO TO EDIT_7;
   rsnDA = DFHUNIMD;
   rsnDL = -1;

 EDIT_7:
   IF NEW_ACCTREC.ccodeDO = '' then
     do;
       ccodeDI = stars;
       ccodeDL = -1;
       ccodeDA = DFHBMBRY;
     end;
   IF NEW_ACCTREC.apprDO = '' then
     do;
       apprDI = stars;
       apprDL = -1;
       apprDA = DFHBMBRY;
     end;
   DCL ACCTDTLI_STRING CHAR(STG(ACCTDTLI)) BASED(ADDR(ACCTDTLI));
   IF SUBSTR(ACCTDTLI_STRING,1,STG(ACCTDTLI)) ^= LOW(STG(ACCTDTLI)) THEN
     do;
       DTL_MSGNO = 3;
       GO TO INPUT_REDISPLAY;
     end;
   IF REQC = 'A' then
     do;
       NEW_ACCTREC.ACCTDO = ACCTC;
       NEW_ACCTREC.statdo = 'N';
       NEW_ACCTREC.LIMITDO = ' 1000.00';
       string(NEW_ACCTREC.PAY_HIST(1)) = PAY_INIT;
       string(NEW_ACCTREC.PAY_HIST(2)) = PAY_INIT;
       string(NEW_ACCTREC.PAY_HIST(3)) = PAY_INIT;
     end;

 CK_OWN:
   USE_QID2 = acctc;
   EXEC CICS HANDLE CONDITION LENGERR(NO_OWN);
   EXEC CICS READQ TS QUEUE(USE_QID) INTO(USE_REC)
       LENGTH(USE_LNG) ITEM(1);
   EXEC CICS HANDLE CONDITION LENGERR (NO_GOOD);
   IF EIBAID = DFHCLEAR then
     GO TO RELEASE_ACCT;
   CALL PLIFILL(ADDR(ACCTDTLO),'00'X,STG(ACCTDTLO));
   HISTTLDA, STATTLDA, STATDA, LIMTTLDA, LIMITDA = DFHBMDAR;
   IF REQC = 'A' then
     do;
       TITLEDO = 'NEW RECORD';
       GO TO LOG_1;
     end;
   ACCTDTLO = OLD_ACCTREC, by name;
   IF REQC = 'X' then
     do;
       TITLEDO = 'DELETION';
       GO TO LOG_2;
     end;
   TITLEDO = 'BEFORE CHANGE';
   IF OLD_ACCTREC.SNAMEDO ^= NEW_ACCTREC.SNAMEDO |
      OLD_ACCTREC.miDO    ^= NEW_ACCTREC.miDO    |
      OLD_ACCTREC.ttlDO   ^= NEW_ACCTREC.ttlDO   then
     MOD_NAME = 'NAME';
   IF OLD_ACCTREC.telDO ^= NEW_ACCTREC.telDO then
     MOD_tele = 'TEL';
   IF OLD_ACCTREC.addr1DO ^= NEW_ACCTREC.addr1DO |
      OLD_ACCTREC.addr2DO ^= NEW_ACCTREC.addr2DO |
      OLD_ACCTREC.addr3DO ^= NEW_ACCTREC.addr3DO then
     MOD_ADDR = 'ADDR';
   IF OLD_ACCTREC.auth1DO ^= NEW_ACCTREC.auth1DO |
      OLD_ACCTREC.auth2DO ^= NEW_ACCTREC.auth2DO |
      OLD_ACCTREC.auth3DO ^= NEW_ACCTREC.auth3DO |
      OLD_ACCTREC.auth4DO ^= NEW_ACCTREC.auth4DO then
     MOD_auth = 'AUTH';
   IF OLD_ACCTREC.cardsDO ^= NEW_ACCTREC.cardsDO    |
      OLD_ACCTREC.imoDO ^= NEW_ACCTREC.imoDO        |
      OLD_ACCTREC.idayDO ^= NEW_ACCTREC.idayDO      |
      OLD_ACCTREC.iyrDO ^= NEW_ACCTREC.iyrDO        |
      OLD_ACCTREC.rsnDO ^= NEW_ACCTREC.rsnDO        |
      OLD_ACCTREC.ccodeDO ^= NEW_ACCTREC.ccodeDO    |
      OLD_ACCTREC.apprDO ^= NEW_ACCTREC.apprDO      then
     MOD_CARD = 'CARD';
   IF OLD_ACCTREC.scode1DO ^= NEW_ACCTREC.scode1DO  |
      OLD_ACCTREC.scode2DO ^= NEW_ACCTREC.scode2DO  |
      OLD_ACCTREC.scode3DO ^= NEW_ACCTREC.scode3DO  then
     MOD_code = 'CODES';
   msgdo = string(MOD_LINE);
   EXEC CICS WRITEQ TS QUEUE('ACCTLOG') FROM(ACCTDTLO)
       LENGTH(DTL_LNG);
   TITLEDO = 'AFTER CHANGE';

 LOG_1:
   ACCTDTLO = NEW_ACCTREC, by name;

 LOG_2:
   UPDT_TERM = eibtrmid;
   UPDT_TIME = eibtime;
   UPDT_DATE = eibdate;
   msgdo = string(UPDT_LINE);
   EXEC CICS WRITEQ TS QUEUE('ACCTLOG') FROM(ACCTDTLO)
       LENGTH(DTL_LNG);
   IF REQC = 'X' then GO TO UPDT_DELETE;
   IF REQC = 'M' then GO TO UPDT_MODIFY;

 UPDT_ADD:
   MENU_MSGNO = 2;
   ACIX_KEY = NEW_ACCTREC.snamedo;
   EXEC CICS WRITE DATASET('ACCTFIL') FROM(NEW_ACCTREC)
       RIDFLD(ACCTC) LENGTH(ACCT_LNG);
   GO TO RELEASE_ACCT;

 UPDT_MODIFY:
   MENU_MSGNO = 3;
   EXEC CICS REWRITE DATASET('ACCTFIL') FROM(NEW_ACCTREC)
       LENGTH (ACCT_LNG);
   GO TO RELEASE_ACCT;

 UPDT_DELETE:
   MENU_MSGNO = 4;
   EXEC CICS DELETE DATASET('ACCTFIL');

 RELEASE_ACCT:
   EXEC CICS DELETEQ TS QUEUE(USE_QID);
   GO TO MENU_REFRESH;
   /* IF EIBAID = DFHCLEAR GO TO MENU_REFRESH; */

 CONFIRM_SEND:
   CALL PLIFILL(ADDR(CONFIRMO),'00'X,STG(CONFIRMO));
   REQC = 'C';
   EXEC CICS SEND MAP('CONFIRM')
                  MAPSET('APCTSET')
                  ERASE
                  FREEKB;
   EXEC CICS RECEIVE MAP('CONFIRM')
                    MAPSET('APCTSET');
   IF EIBAID = DFHPF9 THEN
     do;
       EIBFN = 'XXXX';
       EIBRCODE = 99;
       GO TO NO_GOOD;
     end;
     IF EIBAID = DFHENTER THEN
       GO TO MENU_REFRESH;
     ELSE
       GO TO CONFIRM_SEND;

 MENU_REFRESH:
   CALL PLIFILL(ADDR(ACCTMNUO),'00'X,STG(ACCTMNUO));
   msgmo = MENU_MSG(MENU_MSGNO);
   EXEC CICS SEND MAP('ACCTMNU') MAPSET('APCTSET') ERASE FREEKB;
   EXEC CICS RETURN TRANSID('AP01');

 INPUT_REDISPLAY:
   msgdo = DTL_MSG(DTL_MSGNO);
   IF DTL_MSGNO = 2 |
      DTL_MSGNO = 4 |
      DTL_MSGNO = 5 then
     SNAMEDL = -1;
   EXEC CICS SEND MAP('ACCTDTL') MAPSET('APCTSET') DATAONLY
       CURSOR FREEKB;
   EXEC CICS RETURN TRANSID('AP02') COMMAREA(DFHCOMMAREA)
       LENGTH(stg(dfhcommarea));

 NO_OWN:
   IF EIBAID = DFHCLEAR then GO TO MENU_REFRESH;
   DTL_MSGNO = 2;
   GO TO INPUT_REDISPLAY;

 NO_MAP:
   IF REQC = 'X' then
     do;
      DTL_MSGNO = 1;
      VFYDL = -1;
     end;
   ELSE DTL_MSGNO = 5;
   GO TO INPUT_REDISPLAY;

 PA_KEY:
   DTL_MSGNO = 4;
   GO TO INPUT_REDISPLAY;

 NO_GOOD:
   ERR_FN = eibfn;
   ERR_RCODE = eibrcode;
   EXEC CICS HANDLE CONDITION ERROR;
   EXEC CICS LINK PROGRAM('APCT04')
       COMMAREA(COMMAREA_FOR_APCT04) LENGTH(10);
 end;
